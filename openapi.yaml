openapi: 3.0.0
info:
  title: "WebShop"
  description: "This document describes the API for the refactored Web Shop in the distributed systems laboratory."
  version: 1.0.0-beta
  termsOfService: "-"
  contact:
    email: "info@bestwebshop.tech"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: http://api.bestwebshop.tech/v1
    description: Development server
tags:
- name: "product"
  description: "Everything about the products of the shop"
- name: "category"
  description: "Administrate the categories of products"
- name: "user"
  description: "Operations about user"
- name: "role"
  description: "Find out about the user roles"
- name: "auth"
  description: "Authentication and stuff"
components:
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: JSESSIONID
  schemas:
    ArrayOfProducts:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Product:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Socks
        price:
          type: number
          example: 3.45
        category:
          type: string
          example: Clothing
        details:
          type: string
          example: A warm pair of socks.
paths:
  /product:
    get:
      tags:
      - "product"
      summary: "Get all available products of the shop"
      description: Returns a list of products.
      operationId: "getAll"
      security:
        - cookieAuth: []
      responses:
        200:
          description: A JSON array of products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfProducts'
        5XX:
          description: Unexpected error.
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        405:
          description: "Invalid input"
      security:
      - cookieAuth: []
    put:
      tags:
      - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /product/{id}:
    get:
      tags:
      - "product"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to get
      responses:
        200:
          description: A Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      responses:
        default:
          description: "successful operation"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"